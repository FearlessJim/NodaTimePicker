@page "/"
@using NodaTime;

<h3>Blazor NodaTime Date Picker</h3>

<hr />
<h3>Inline</h3>

<div class="d-flex flex-sm-row flex-column">
	<div class="mr-3 order-1 order-sm-0">
		<DatePicker Inline=true SelectedDateChanged=changed1 />
	</div>
	<div class="order-0 order-sm-1">
		Selected Date: <span>@selectedDate1</span>
	</div>
</div>

<pre>
<code class="html">
	@demo1String
</code>
</pre>
<hr />

<h3>Bound to Input</h3>

<p>
	Focus on the Input element to display the DatePicker.<br />
	Select a Date to close the DatePicker.
</p>

<input type="text" onfocus=@focussed2 value=@selectedDate2 class="form-control mb-2" placeholder="Focus to open DatePicker..." />
<DatePicker Visible=@datePicker2Visible Selected=@selected2 ShowClose=@true />

<pre>
<code class="html">
	@demo2String
</code>
</pre>

<hr />
<h3>First Day of Week</h3>
<p>Specify the first day of the week. Default is Monday.</p>
<div class="d-flex flex-sm-row flex-column">
	<div class="mr-3 order-1 order-sm-0">
		<DatePicker Inline=true FirstDayOfWeek=@firstDOW3 />
	</div>
	<div class="order-0 order-sm-1">
		<p>
			First Day of Week:
			<select bind=@firstDOW3 class="custom-select">
				<option value="@IsoDayOfWeek.Monday">Monday</option>
				<option value="@IsoDayOfWeek.Tuesday">Tuesday</option>
				<option value="@IsoDayOfWeek.Wednesday">Wednesday</option>
				<option value="@IsoDayOfWeek.Thursday">Thursday</option>
				<option value="@IsoDayOfWeek.Friday">Friday</option>
				<option value="@IsoDayOfWeek.Saturday">Saturday</option>
				<option value="@IsoDayOfWeek.Sunday">Sunday</option>
			</select>
		</p>
	</div>
</div>

<hr />
<h3>Display Days of Week</h3>
<p>
	Hide the Day of Week row.
</p>

<div class="d-flex flex-sm-row flex-column">
	<div class="mr-3 order-1 order-sm-0">
		<DatePicker Inline=true DisplayDaysOfWeek=@displayDOW4 />
	</div>
	<div class="order-0 order-sm-1">
		<label>
			<input type="checkbox" bind=@displayDOW4 />
			Display Days of Week:
		</label>
	</div>
</div>

<hr />
<h3>Localisation</h3>

<div class="d-flex flex-sm-row flex-column">
	<div class="mr-3 order-1 order-sm-0">
		<DatePicker Inline=true FormatProvider=@formatProvider5 />
	</div>
	<p class="order-0 order-sm-1">
		<select bind=@formatProvider5String>
			<option selected value="fr-FR">fr-FR</option>
			<option value="en-GB">en-GB</option>
		</select>
	</p>
</div>

<hr />
<h3>Min. Date</h3>

<div class="d-flex flex-sm-row flex-column">
	<div class="mr-3 order-1 order-sm-0">
		<DatePicker Inline=true MinDate=@minDate6 />
	</div>
	<p class="order-0 order-sm-1">
		Min. date: @minDate6
	</p>
</div>

<hr />
<h3>Max. Date</h3>

<div class="d-flex flex-sm-row flex-column">
	<div class="mr-3 order-1 order-sm-0">
		<DatePicker Inline=true MaxDate=@maxDate7 />
	</div>
	<p class="order-0 order-sm-1">
		Max. date: @maxDate7
	</p>
</div>

<hr />
<h3>Disabled Dates</h3>

<div class="d-flex flex-sm-row flex-column">
	<div class="mr-3 order-1 order-sm-0">
		<DatePicker Inline=true DisabledDates=@disabledDates8 />
	</div>
	<ul class="order-0 order-sm-1">
		@foreach (var date in disabledDates8)
		{
			<li>@date</li>
		}
	</ul>
</div>

<hr />
<h3>Enabled Dates</h3>
<i>Todo</i>

<hr />
<h3>Days of Week Disabled</h3>

<div class="d-flex flex-sm-row flex-column">
	<div class="mr-3 order-1 order-sm-0">
		<DatePicker Inline=true DaysOfWeekDisabled=@DaysOfWeekDisabled10 />
	</div>
	<ul class="list-unstyled order-0 order-sm-1">
		<li>
			<label>
				<input type="checkbox" bind=monday10 /> Monday
			</label>
		</li>
		<li>
			<label>
				<input type="checkbox" bind=tuesday10 /> Tuesday
			</label>
		</li>
		<li>
			<label>
				<input type="checkbox" bind=wednesday10 /> Wednesday
			</label>
		</li>
		<li>
			<label>
				<input type="checkbox" bind=thursday10 /> Thursday
			</label>
		</li>
		<li>
			<label>
				<input type="checkbox" bind=friday10 /> Friday
			</label>
		</li>
		<li>
			<label>
				<input type="checkbox" bind=saturday10 /> Saturday
			</label>
		</li>
		<li>
			<label>
				<input type="checkbox" bind=sunday10 /> Sunday
			</label>
		</li>
	</ul>
</div>

<hr />
<h3>Set Selected Date</h3>

<div class="d-flex flex-sm-row flex-column">
	<div class="mr-3 order-1 order-sm-0">
		<DatePicker Inline=true SelectedDate=@selectedDate11 />
	</div>
	<p class="order-0 order-sm-1">
		<button type="button" class="btn btn-outline-primary mb-2" onclick="@(() => selectedDate11 = setSelectedDate11_1)">Set date to @setSelectedDate11_1</button><br />
		<button type="button" class="btn btn-outline-primary mb-2" onclick="@(() => selectedDate11 = setSelectedDate11_2)">Set date to @setSelectedDate11_2</button><br />
		<button type="button" class="btn btn-outline-primary" onclick="@(() => selectedDate11 = setSelectedDate11_3)">Set date to @setSelectedDate11_3</button>
	</p>
</div>

<hr />
<h3>Disabled Date Intervals</h3>
<i>Todo</i>

<hr />
<h3>Day View Header Format</h3>
<div class="d-flex flex-sm-row flex-column">
	<div class="mr-3 order-1 order-sm-0">
		<DatePicker Inline=true DayViewHeaderFormat="MM yy" />
	</div>
	<p class="order-0 order-sm-1">
		DayViewHeaderFormat: <strong>MM yy</strong>
	</p>
</div>

<hr />
<h3>Month View Header Format</h3>
<div class="d-flex flex-sm-row flex-column">
	<div class="mr-3 order-1 order-sm-0">
		<DatePicker Inline=true MonthViewHeaderFormat="yy" InitialViewMode=@ViewMode.Months />
	</div>
	<p class="order-0 order-sm-1">
		MonthViewHeaderFormat: <strong>yy</strong><br />
		InitialViewMode: <strong>ViewMode.Months</strong>
	</p>
</div>

<hr />
<h3>Show Today/Clear</h3>
<div class="d-flex flex-sm-row flex-column">
	<div class="mr-3 order-1 order-sm-0">
		<DatePicker Inline=true ShowToday=@showToday ShowClear=@showClear />
	</div>
	<div class="order-0 order-sm-1">
		<label>
			<input type="checkbox" bind=@showToday />
			Show Today
		</label><br />
		<label>
			<input type="checkbox" bind=@showClear />
			Show Clear
		</label>
	</div>
</div>

<hr />
<h3>Initial View Mode</h3>
<div class="d-flex flex-sm-row flex-column">
	<div class="mr-3 order-1 order-sm-0">
		<DatePicker Inline=true InitialViewMode=@ViewMode.Years />
	</div>
	<div class="order-0 order-sm-1">
		InitialViewMode: <strong>ViewMode.Years</strong>
	</div>
</div>

<hr />
<h3>Events</h3>
<div class="d-flex flex-sm-row flex-column">
	<div class="mr-3">
		<DatePicker Inline=true SelectedDateChanged=@changed Selected=@selected Cleared=@cleared />
	</div>
	<ul>
		@foreach (var e in eventsList)
		{
			<li>@e</li>
		}
	</ul>
</div>

@functions {
	System.Globalization.CultureInfo FormatProvider = new System.Globalization.CultureInfo("fr-FR");
	static LocalDate Today = SystemClock.Instance.GetCurrentInstant().InUtc().LocalDateTime.Date;

	LocalDate? selectedDate1;
	void changed1(LocalDate? localDate)
	{
		selectedDate1 = localDate;
		StateHasChanged();
	}
	string demo1String = "<DatePicker Inline=true  SelectedDateChanged=changed1 />";
	
	bool datePicker2Visible = false;
	LocalDate? selectedDate2;
	void focussed2(UIFocusEventArgs e)
	{
		datePicker2Visible = true;
	}

	void selected2(LocalDate localDate)
	{
		selectedDate2 = localDate;
		datePicker2Visible = false;
		StateHasChanged();
	}

	string demo2String = @"<input type=""text"" onfocus=""@focussed"" />
	<DatePicker Visible=""datePicker2Visible"" Selected=""selected2"" />

	@functions {
	  bool datePicker2Visible = false;
	  void focussed2(UIFocusEventArgs e)
	  {
	    datePicker2Visible = true;
	  }
	  void selected2(LocalDate localDate)
	  {
	    datePicker2Visible = false;
	    StateHasChanged();
	  }
	}";

	IsoDayOfWeek firstDOW3 = IsoDayOfWeek.Tuesday;

	bool displayDOW4 = false;

	string formatProvider5String
	{
		get => formatProvider5.DisplayName;
		set => formatProvider5 = new System.Globalization.CultureInfo(value);
	}
	System.Globalization.CultureInfo formatProvider5 = new System.Globalization.CultureInfo("fr-FR");

	LocalDate minDate6 = Today;
	LocalDate maxDate7 = Today;

	IEnumerable<LocalDate> disabledDates8
	{
		get
		{
			yield return Today.PlusDays(-1);
			yield return Today.PlusDays(1);
			yield return Today.PlusDays(5);
			yield return Today.PlusDays(7);
			yield return Today.PlusDays(8);
		}
	}

	bool monday10 = true;
	bool tuesday10 = false;
	bool wednesday10 = true;
	bool thursday10 = false;
	bool friday10 = true;
	bool saturday10 = true;
	bool sunday10 = true;
	IEnumerable<IsoDayOfWeek> DaysOfWeekDisabled10
	{
		get
		{
			if (!monday10)
				yield return IsoDayOfWeek.Monday;
			if (!tuesday10)
				yield return IsoDayOfWeek.Tuesday;
			if (!wednesday10)
				yield return IsoDayOfWeek.Wednesday;
			if (!thursday10)
				yield return IsoDayOfWeek.Thursday;
			if (!friday10)
				yield return IsoDayOfWeek.Friday;
			if (!saturday10)
				yield return IsoDayOfWeek.Saturday;
			if (!sunday10)
				yield return IsoDayOfWeek.Sunday;
		}
	}

	// Default to Today
	LocalDate selectedDate11 = Today;
	LocalDate setSelectedDate11_1 = Today.PlusDays(2);
	LocalDate setSelectedDate11_2 = Today.PlusWeeks(1);
	LocalDate setSelectedDate11_3 = Today.PlusMonths(1);

	bool showToday = true;
	bool showClear = true;

	List<string> eventsList = new List<string>()
{
"Events will appear here..."
};

	void changed(LocalDate? d)
	{
		eventsList.Add($"Changed. Value: {d}");
		StateHasChanged();
	}

	void selected(LocalDate d)
	{
		eventsList.Add($"Selected. Value: {d}");
		StateHasChanged();
	}

	void cleared()
	{
		eventsList.Add("Cleared");
		StateHasChanged();
	}
}