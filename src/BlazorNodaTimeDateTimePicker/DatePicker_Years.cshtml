<div class="years">
	@for (int year = start - 1; year <= end + 1; year++)
	{
		var y = year; // need to capture current value of 'year' variable for onclick method
		<div class="@ClassName(year)" onclick=@(() => YearSelected(y))>
			@year
		</div>
	}
</div>

@functions {
	[Parameter] protected DatePickerState State { get; set; }

	int start, end;
	Dictionary<int, bool> disabled;

	protected override void OnInit()
	{
		State.OnDecadeToDisplayChanged += Render;

		Render();
	}

	void Render()
	{
		(start, end) = State.MonthToDisplay.GetDecade();

		disabled = new Dictionary<int, bool>();

		for (int i = start - 1; i <= end + 1; i++)
		{
			disabled.Add(i, State.IsYearDisabled(i));
		}
	}

	protected string ClassName(int year)
	{
		var strClass = "year";

		if (disabled[year])
			strClass += " disabled";

		if (State.SelectedYear.HasValue && year == State.SelectedYear.Value)
			strClass += " active";

		if (year < start)
			strClass += " old";
		else if (year > end)
			strClass += " new";

		return strClass;
	}

	void YearSelected(int year)
	{
		if (disabled[year] == false)
		{
			State.SetDisplayYear(year);
			State.PreviousViewMode();
		}
	}
}