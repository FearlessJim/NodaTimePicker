@using NodaTime
@using NodaTime.Extensions
<DayElement potato="hello"></DayElement>
<div class="@ClassName" style="@MainStyle">
	<div class="datepicker-content">
		@if (State.ViewMode == ViewMode.Days)
		{
			<div class="datepicker-days">
				<div class="datepicker-header">
					<div class="prev" onclick="@PreviousMonth">&lt;</div>
					<div class="month" onclick="@SelectMonth">@MonthText</div>
					<div class="next" onclick="@NextMonth">&gt;</div>
				</div>
				@if (DisplayDaysOfWeek)
				{
					<div class="datepicker-days-of-week">
						@{
							var dow = FirstDayOfWeek;
							do
							{
								<div class="@CssClassGenerator.DayOfWeek(dow, DaysOfWeekDisabled)">@DayOfWeekAbbreviation(dow)</div>
								dow = dow.Next();
							} while (dow != FirstDayOfWeek);
						}
					</div>
				}
				<div class="days">
					@foreach (var date in Days)
					{
						<div class="day-wrapper">
							<div class="@CssClassGenerator.Day(date, State)" onclick="@(e => DayClicked(e, date))">
								@date.Day
							</div>
						</div>
					}
				</div>
				@if (ShowToday || ShowClear)
				{
					<div class="datepicker-footer">
						@if (ShowToday)
						{
							<button onclick=@TodayClicked>@TodayText</button>
						}
						@if (ShowClear)
						{
							<button onclick="@ClearClicked">@ClearText</button>
						}
						@if (ShowClose && !Inline)
						{
							<button onclick="@CloseClicked">@CloseText</button>
						}
					</div>
				}
			</div>
		}
		else if (State.ViewMode == ViewMode.Months)
		{
			<div class="datepicker-months">
				<div class="datepicker-header">
					<div class="prev" onclick=@PreviousYear>&lt;</div>
					<div class="year" onclick=@SelectYear>@YearText</div>
					<div class="next" onclick=@NextYear>&gt;</div>
				</div>
				<div class="months">
					@for (int i = 1; i <= 12; i++)
					{
						var month = i;
						<div class="@CssClassGenerator.Month(month, disabledMonths[month - 1], State)" onclick="@(e => MonthClicked(e, month))">@MonthName(month)</div>
					}					
				</div>
			</div>
		}
		else if (State.ViewMode == ViewMode.Years)
		{
			<div class="datepicker-years">
				<div class="datepicker-header">
					<div class="prev" onclick=@PreviousDecade>&lt;</div>
					<div class="decade" onclick=@SelectDecade>@DecadeText</div>
					<div class="next" onclick=@NextDecade>&gt;</div>
				</div>
				<div class="years">
					@for (int year = yearStart - 1; year <= yearEnd + 1; year++)
					{
						var y = year;
						<div class="@CssClassGenerator.Year(year, disabledYears[year], State)" onclick=@(e => YearClicked(e, y))>
							@year
						</div>
					}
				</div>
			</div>
		}
		else if (State.ViewMode == ViewMode.Decades)
		{
			<div class="datepicker-decades">
				<div class="datepicker-header">
					<div class="prev" onclick=@PreviousCentury>&lt;</div>
					<div class="century">@CenturyText</div>
					<div class="next" onclick=@NextCentury>&gt;</div>
				</div>
			</div>
			<div class="decades">
				@for (int decade = decadeStart - 10; decade <= decadeEnd + 10; decade += 10)
				{
					var d = decade;
					<div class="@CssClassGenerator.Decade(decade, disabledDecades[decade], State)" onclick=@(e => DecadeClicked(e, d))>
						@decade
					</div>
				}
			</div>
		}
	</div>
</div>

@functions {
	protected DatePickerState State { get; set; } = new DatePickerState();

	[Parameter] protected string Class { get; set; }
	[Parameter] protected string Style { get; set; }
	[Parameter] protected bool Logging { get; set; } = false;
	[Parameter] protected System.Globalization.CultureInfo FormatProvider { get; set; } = System.Globalization.CultureInfo.InvariantCulture;
	[Parameter] protected bool DisplayDaysOfWeek { get; set; } = true;
	[Parameter] protected string DayViewHeaderFormat { get; set; } = "MMMM yyyy";
	[Parameter] protected string MonthViewHeaderFormat { get; set; } = "yyyy";
	[Parameter] protected string MaxWidth { get; set; }
	[Parameter] protected string Width { get; set; } = "250px;";
	[Parameter] protected bool ShowToday { get; set; } = true;
	[Parameter] protected bool ShowClear { get; set; } = true;
	[Parameter] protected bool ShowClose { get; set; } = false;
	[Parameter] protected string TodayText { get; set; } = "Today";
	[Parameter] protected string ClearText { get; set; } = "Clear";
	[Parameter] protected string CloseText { get; set; } = "Close";
	[Parameter] protected ViewMode InitialViewMode { get; set; } = ViewMode.Days;

	[Parameter] protected bool Visible
	{
		get => State.Visible;
		set => State.Visible = value;
	}
	[Parameter] protected bool Inline
	{
		get => State.Inline;
		set => State.Inline = value;
	}
	[Parameter] protected IsoDayOfWeek FirstDayOfWeek
	{
		get => State.FirstDayOfWeek;
		set => State.FirstDayOfWeek = value;
	}
	[Parameter] protected LocalDate? SelectedDate
	{
		get => State.SelectedDate;
		set => State.SelectedDate = value;
	}
	[Parameter] protected LocalDate? MinDate
	{
		get => State.MinDate;
		set => State.MinDate = value;
	}
	[Parameter] protected LocalDate? MaxDate
	{
		get => State.MaxDate;
		set => State.MaxDate = value;
	}
	[Parameter] protected IEnumerable<LocalDate> DisabledDates
	{
		get => State.DisabledDates;
		set => State.DisabledDates = value;
	}
	[Parameter] protected IEnumerable<LocalDate> EnabledDates
	{
		get => State.EnabledDates;
		set => State.EnabledDates = value;
	}
	[Parameter] protected IEnumerable<IsoDayOfWeek> DaysOfWeekDisabled
	{
		get => State.DaysOfWeekDisabled;
		set => State.DaysOfWeekDisabled = value;
	}
	[Parameter] protected IEnumerable<(LocalDate start, LocalDate end)> DisabledDateIntervals
	{
		get => State.DisabledDateIntervals;
		set => State.DisabledDateIntervals = value;
	}

	// Events in use
	[Parameter] protected Action<LocalDate?> Changed { get; set; }
	[Parameter] protected Action<LocalDate> Selected { get; set; }
	[Parameter] protected Action Cleared { get; set; }

	[Parameter] protected Action Updated { get; set; }

	// Parameters not yet in use
	[Parameter] protected bool CloseOnSelect { get; set; } = true;

	// Events not yet in use
	[Parameter] protected Action Shown { get; set; }
	[Parameter] protected Action Hidden { get; set; }
	[Parameter] protected Action Disabled { get; set; }
	[Parameter] protected Action Enabled { get; set; }

	// Private properties and fields
	IEnumerable<LocalDate> Days { get; set; }

	protected override void OnInit()
	{
		State.WriteToLog = Logging;

		State.Log(nameof(OnInit));

		State.OnStateChanged += StateHasChanged;

		State.OnSelectedDateChanged += OnChanged;
		State.OnSelected += OnSelected;
		State.OnCleared += OnCleared;

		State.OnMonthToDisplayChanged += RenderDays;
		State.OnYearToDisplayChanged += RenderMonths;
		State.OnDecadeToDisplayChanged += RenderYears;
		State.OnCenturyToDisplayChanged += RenderDecades;
	}

	protected override void OnParametersSet()
	{
		State.Log(nameof(OnParametersSet));

		State.ViewMode = InitialViewMode;

		switch (State.ViewMode)
		{
			case ViewMode.Days:
				RenderDays();
				break;
			case ViewMode.Months:
				RenderMonths();
				break;
			case ViewMode.Years:
				RenderYears();
				break;
			case ViewMode.Decades:
				RenderDecades();
				break;
			default:
				break;
		}
	}

	private void OnChanged(LocalDate? localDate)
	{
		State.Log(nameof(OnChanged));

		Changed?.Invoke(localDate);
	}

	private void OnSelected(LocalDate localDate)
	{
		State.Log(nameof(OnSelected));

		Selected?.Invoke(localDate);
	}

	private void OnCleared()
	{
		State.Log(nameof(OnCleared));

		Cleared?.Invoke();
	}

	#region Days

	void RenderDays()
	{
		State.Log(nameof(RenderDays));

		var startOfWeekOfMonth = State.MonthToDisplay.StartOfWeek(FirstDayOfWeek);

		var endOfMonth = State.MonthToDisplay.EndOfMonth();
		var endOfWeekOfMonth = endOfMonth.EndOfWeek(FirstDayOfWeek);

		Days = GetDaysBetween(startOfWeekOfMonth, endOfWeekOfMonth);
	}

	void DayClicked(UIMouseEventArgs eventArgs, LocalDate date)
	{
		State.Log(nameof(DayClicked));

		if (!State.IsDayDisabled(date))
			State.SetSelectedDate(date);
	}

	#endregion

	static IEnumerable<LocalDate> GetDaysBetween(LocalDate start, LocalDate end)
	{
		if (start > end)
			yield break;

		do
		{
			yield return start;
			start = start.PlusDays(1);
		} while (start <= end);
	}

	private string ClassName
	{
		get
		{
			if (!string.IsNullOrEmpty(Class))
				return $"{CssClassGenerator.Main(Inline)} {Class}";
			else
				return CssClassGenerator.Main(Inline);
		}
	}

	protected string MainStyle
	{
		get
		{
			var str = new List<string>();

			if (Inline == false && Visible == false)
				str.Add("display:none;");
			if (!string.IsNullOrEmpty(Width))
				str.Add($"width:{Width};");
			if (!string.IsNullOrEmpty(MaxWidth))
				str.Add($"max-width:{MaxWidth};");

			str.Add(Style);

			return string.Join(" ", str);
		}
	}

	string DayOfWeekAbbreviation(IsoDayOfWeek isoDayOfWeek)
	{
		return FormatProvider.DateTimeFormat.GetShortestDayName(isoDayOfWeek.ToDayOfWeek());
	}

	string MonthText
	{
		get { return State.MonthToDisplay.ToString(DayViewHeaderFormat, FormatProvider); }
	}

	string MonthName(int month)
	{
		return FormatProvider.DateTimeFormat.GetAbbreviatedMonthName(month);
	}

	string YearText
	{
		get { return State.MonthToDisplay.ToString(MonthViewHeaderFormat, FormatProvider); }
	}

	string DecadeText => State.MonthToDisplay.GetDecadeString();

	string CenturyText => State.MonthToDisplay.GetCenturyString();

	#region Months

	bool[] disabledMonths;

	void RenderMonths()
	{
		State.Log(nameof(RenderMonths));

		disabledMonths = new bool[12];

		for (int i = 0; i < 12; i++)
		{
			disabledMonths[i] = State.IsMonthDisabled(i + 1, State.MonthToDisplay.Year);
		}
	}

	void MonthClicked(UIMouseEventArgs eventArgs, int month)
	{
		State.Log(nameof(MonthClicked));
		
		if (disabledMonths[month - 1] == false)
		{
			State.SetDisplayMonth(month);
			State.PreviousViewMode();
		}
	}

	void NextMonth(UIMouseEventArgs eventArgs)
	{
		State.Log(nameof(NextMonth));

		State.NextMonth();
		RenderDays();
		OnUpdated();
	}

	void PreviousMonth(UIMouseEventArgs eventArgs)
	{
		State.Log(nameof(PreviousMonth));

		State.PreviousMonth();
		RenderDays();
		OnUpdated();
	}

	void SelectMonth(UIMouseEventArgs eventArgs)
	{
		State.Log(nameof(SelectMonth));

		RenderMonths();
		State.NextViewMode();
	}

	#endregion

	#region Years

	int yearStart, yearEnd;
	Dictionary<int, bool> disabledYears;

	void RenderYears()
	{
		State.Log(nameof(RenderYears));

		(yearStart, yearEnd) = State.MonthToDisplay.GetDecade();

		disabledYears = new Dictionary<int, bool>();

		for (int i = yearStart - 1; i <= yearEnd + 1; i++)
		{
			disabledYears.Add(i, State.IsYearDisabled(i));
		}
	}

	void YearClicked(UIMouseEventArgs eventArgs, int year)
	{
		State.Log(nameof(YearClicked));

		if (disabledYears[year] == false)
		{
			State.SetDisplayYear(year);
			RenderMonths();
			State.PreviousViewMode();
		}
	}

	void NextYear(UIMouseEventArgs eventArgs)
	{
		State.Log(nameof(NextYear));

		State.NextYear();
		OnUpdated();
	}

	void PreviousYear(UIMouseEventArgs eventArgs)
	{
		State.Log(nameof(PreviousYear));

		State.PreviousYear();
		OnUpdated();
	}

	void SelectYear(UIMouseEventArgs eventArgs)
	{
		State.Log(nameof(SelectYear));

		RenderYears();
		State.NextViewMode();
	}

	#endregion

	#region Decades

	int decadeStart, decadeEnd;
	Dictionary<int, bool> disabledDecades;

	void RenderDecades()
	{
		State.Log(nameof(RenderDecades));

		(decadeStart, decadeEnd) = State.MonthToDisplay.GetCentury();

		disabledDecades = new Dictionary<int, bool>();

		for (int i = decadeStart - 10; i <= decadeEnd + 10; i += 10)
		{
			disabledDecades.Add(i, State.IsDecadeDisabled(i));
		}
	}

	void DecadeClicked(UIMouseEventArgs eventArgs, int decade)
	{
		State.Log(nameof(DecadeClicked));

		if (disabledDecades[decade] == false)
		{
			State.SetDisplayYear(decade);
			RenderYears();
			State.PreviousViewMode();
		}
	}

	void NextDecade(UIMouseEventArgs eventArgs)
	{
		State.Log(nameof(NextDecade));

		State.NextDecade();
		OnUpdated();
	}

	void PreviousDecade(UIMouseEventArgs eventArgs)
	{
		State.Log(nameof(PreviousDecade));

		State.PreviousDecade();
		OnUpdated();
	}

	void SelectDecade(UIMouseEventArgs eventArgs)
	{
		State.Log(nameof(SelectDecade));

		RenderDecades();
		State.NextViewMode();
	}

	#endregion

	#region Centuries

	void NextCentury(UIMouseEventArgs eventArgs)
	{
		State.Log(nameof(NextCentury));

		State.NextCentury();
		OnUpdated();
	}

	void PreviousCentury(UIMouseEventArgs eventArgs)
	{
		State.Log(nameof(PreviousCentury));

		State.PreviousCentury();
		OnUpdated();
	}

	#endregion

	void TodayClicked(UIMouseEventArgs eventArgs)
	{
		State.Log(nameof(TodayClicked));

		State.SetSelectedDateToday();
	}

	void ClearClicked(UIMouseEventArgs eventArgs)
	{
		State.Log(nameof(ClearClicked));

		State.ClearSelectedDate();
	}

	void CloseClicked(UIMouseEventArgs eventArgs)
	{
		State.Log(nameof(CloseClicked));

		if (!Inline)
			State.Close();
	}

	void OnUpdated()
	{
		State.Log(nameof(OnUpdated));

		Updated?.Invoke();
	}
}
