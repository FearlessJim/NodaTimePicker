@using NodaTime

<div class="@MainClass" style="@MainStyle">
	<div class="datepicker-content">
		@if (State.ViewMode == ViewMode.Days)
		{
			<div class="datepicker-days">
				<div class="datepicker-header">
					<div class="prev" onclick="@PreviousMonth">&lt;</div>
					<div class="month" onclick="@SelectMonth">@MonthText</div>
					<div class="next" onclick="@NextMonth">&gt;</div>
				</div>
				<div class="datepicker-days-of-week">
					@{
						var dow = FirstDayOfWeek;
						do
						{
							<div class="@DayOfWeekClass(dow)">@dow.ToStringAbbr()</div>
							dow = dow.Next();
						} while (dow != FirstDayOfWeek);
					}
				</div>
				<div class="days">
					@foreach (var item in Days)
					{
						<DatePicker_Day Date="item" State="State" />
					}
				</div>
				@if (ShowToday || ShowClear)
				{
					<div class="datepicker-footer">
						@if (ShowToday)
						{
							<button onclick=@TodayClicked>Today</button>
						}
						@if (ShowClear)
						{
							<button onclick="@ClearClicked">Clear</button>
						}
					</div>
				}
			</div>
		}
		else if (State.ViewMode == ViewMode.Months)
		{
			<div class="datepicker-months">
				<div class="datepicker-header">
					<div class="prev" onclick=@PreviousYear>&lt;</div>
					<div class="year" onclick=@SelectYear>@YearText</div>
					<div class="next" onclick=@NextYear>&gt;</div>
				</div>
				<DatePicker_Months State="State" />
			</div>
		}
		else if (State.ViewMode == ViewMode.Years)
		{
			<div class="datepicker-years">
				<div class="datepicker-header">
					<div class="prev" onclick=@PreviousDecade>&lt;</div>
					<div class="decade" onclick=@SelectDecade>@DecadeText</div>
					<div class="next" onclick=@NextDecade>&gt;</div>
				</div>
				<DatePicker_Years State="State" />
			</div>
		}
		else if (State.ViewMode == ViewMode.Decades)
		{
			<div class="datepicker-decades">
				<div class="datepicker-header">
					<div class="prev" onclick=@PreviousCentury>&lt;</div>
					<div class="century">@CenturyText</div>
					<div class="next" onclick=@NextCentury>&gt;</div>
				</div>
			</div>
			<DatePicker_Decades State="State" />
		}
	</div>
</div>

@functions {
	protected DatePickerState State { get; set; } = new DatePickerState();

	// Parameters in use -> move most of these to DatePickerState
	[Parameter] protected IsoDayOfWeek FirstDayOfWeek
	{
		get => State.FirstDayOfWeek;
		set => State.FirstDayOfWeek = value;
	}
	[Parameter] protected LocalDate? SelectedDate
	{
		get => State.SelectedDate;
		set => State.SelectedDate = value;
	}
	[Parameter] protected LocalDate MinDate
	{
		get => State.MinDate;
		set => State.MinDate = value;
	}

	[Parameter]
	protected LocalDate MaxDate
	{
		get => State.MaxDate;
		set => State.MaxDate = value;
	}

	[Parameter] protected IEnumerable<LocalDate> DisabledDates
	{
		get => State.DisabledDates;
		set => State.DisabledDates = value;
	}
	[Parameter] protected IEnumerable<LocalDate> EnabledDates
	{
		get => State.EnabledDates;
		set => State.EnabledDates = value;
	}
	[Parameter] protected IEnumerable<IsoDayOfWeek> DaysOfWeekDisabled
	{
		get => State.DaysOfWeekDisabled;
		set => State.DaysOfWeekDisabled = value;
	}
	[Parameter] protected IEnumerable<(LocalDate start, LocalDate end)> DisabledDateIntervals
	{
		get => State.DisabledDateIntervals;
		set => State.DisabledDateIntervals = value;
	}

	[Parameter] protected string DayViewHeaderFormat { get; set; } = "MMMM yyyy";
	[Parameter] protected string MonthViewHeaderFormat { get; set; } = "yyyy";
	[Parameter] protected bool Visible { get; set; } = false;
	[Parameter] protected bool Inline { get; set; } = false;
	[Parameter] protected string MaxWidth { get; set; }
	[Parameter] protected string Width { get; set; }
	[Parameter] protected bool ShowToday { get; set; } = true;
	[Parameter] protected bool ShowClear { get; set; } = true;

	// Events in use
	[Parameter] protected Action<LocalDate?> Changed { get; set; }
	[Parameter] protected Action<LocalDate> Selected { get; set; }
	[Parameter] protected Action Cleared { get; set; }

	[Parameter] protected Action Updated { get; set; }

	// Parameters not yet in use
	[Parameter] protected bool ShowClose { get; set; } = false;
	[Parameter] protected bool CloseOnSelect { get; set; } = true;

	// Events not yet in use
	[Parameter] protected Action Shown { get; set; }
	[Parameter] protected Action Hidden { get; set; }
	[Parameter] protected Action Disabled { get; set; }
	[Parameter] protected Action Enabled { get; set; }

	// Private properties and fields
	private IEnumerable<LocalDate> Days { get; set; }

	protected override void OnInit()
	{
		State.OnStateChanged += StateHasChanged;

		State.OnSelectedDateChanged += OnChanged;
		State.OnSelected += OnSelected;
		State.OnCleared += OnCleared;

		State.OnMonthToDisplayChanged += DisplayDays;
	}

	private void OnChanged(LocalDate? localDate)
	{
		Changed?.Invoke(localDate);
	}

	private void OnSelected(LocalDate localDate)
	{
		Selected?.Invoke(localDate);
	}

	private void OnCleared()
	{
		Cleared?.Invoke();
	}

	protected override void OnParametersSet()
	{
		DisplayDays();
	}

	protected static IEnumerable<LocalDate> GetDaysBetween(LocalDate start, LocalDate end)
	{
		do
		{
			yield return start;
			start = start.PlusDays(1);
		} while (start <= end);
	}

	protected string MainClass
	{
		get
		{
			var str = "datepicker";
			if (Inline == false)
				str += " datepicker-dropdown-menu";

			return str;
		}
	}

	protected string MainStyle
	{
		get
		{
			var str = new List<string>();

			if (Inline == false && Visible == false)
				str.Add("display:none;");
			if (!string.IsNullOrEmpty(Width))
				str.Add($"width:{Width};");
			if (!string.IsNullOrEmpty(MaxWidth))
				str.Add($"max-width:{MaxWidth};");

			return string.Join(" ", str);
		}
	}

	protected string MonthText
	{
		get { return State.MonthToDisplay.ToString(DayViewHeaderFormat, null); }
	}

	protected string YearText
	{
		get { return State.MonthToDisplay.ToString(MonthViewHeaderFormat, null); }
	}

	protected string DecadeText => State.MonthToDisplay.GetDecadeString();

	protected string CenturyText => State.MonthToDisplay.GetCenturyString();

	void DisplayDays()
	{
		Console.WriteLine(nameof(DisplayDays));

		var startOfWeekOfMonth = State.MonthToDisplay.StartOfWeek(FirstDayOfWeek);

		var endOfMonth = State.MonthToDisplay.EndOfMonth();
		var endOfWeekOfMonth = endOfMonth.EndOfWeek(FirstDayOfWeek);

		Days = GetDaysBetween(startOfWeekOfMonth, endOfWeekOfMonth);
	}

	// Month
	protected void NextMonth()
	{
		State.NextMonth();

		DisplayDays();

		OnUpdated();
	}

	protected void PreviousMonth()
	{
		State.PreviousMonth();

		DisplayDays();

		OnUpdated();
	}

	protected void SelectMonth()
	{
		State.NextViewMode();
	}

	// Year
	protected void NextYear()
	{
		State.NextYear();

		OnUpdated();
	}

	protected void PreviousYear()
	{
		State.PreviousYear();

		OnUpdated();
	}

	protected void SelectYear()
	{
		State.NextViewMode();
	}

	// Decade
	protected void NextDecade()
	{
		State.NextDecade();

		OnUpdated();
	}

	protected void PreviousDecade()
	{
		State.PreviousDecade();

		OnUpdated();
	}

	protected void SelectDecade()
	{
		State.NextViewMode();
	}

	// Century
	protected void NextCentury()
	{
		State.NextCentury();

		OnUpdated();
	}

	protected void PreviousCentury()
	{
		State.PreviousCentury();

		OnUpdated();
	}

	protected string DayOfWeekClass(IsoDayOfWeek dayOfWeek)
	{
		var strClass = "dow";
		if (dayOfWeek.IsWeekday())
			strClass += " weekday";
		else
			strClass += " weekend";

		if (DaysOfWeekDisabled != null)
		{
			if (DaysOfWeekDisabled.Contains(dayOfWeek))
				strClass += " disabled";
		}

		return strClass;
	}

	protected void TodayClicked()
	{
		Console.WriteLine(nameof(TodayClicked));
		State.SetSelectedDateToday();
	}

	protected void ClearClicked()
	{
		Console.WriteLine(nameof(ClearClicked));
		State.ClearSelectedDate();
	}

	protected void OnUpdated()
	{
		Updated?.Invoke();
	}
}
