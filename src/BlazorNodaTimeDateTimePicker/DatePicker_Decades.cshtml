<div class="decades">
	@for (int decade = start - 10; decade <= end + 10; decade += 10)
	{
		var d = decade;
		<div class="@ClassName(decade)" onclick=@(() => DecadeSelected(d))>
			@decade
		</div>
	}
</div>

@functions {
	[Parameter] protected DatePickerState State { get; set; }

	int start, end;
	Dictionary<int, bool> disabled;

	protected override void OnInit()
	{
		State.OnCenturyToDisplayChanged += Render;

		Render();
	}

	void Render()
	{
		(start, end) = State.MonthToDisplay.GetCentury();

		disabled = new Dictionary<int, bool>();

		for (int i = start - 10; i <= end + 10; i += 10)
		{
			disabled.Add(i, State.IsDecadeDisabled(i));
		}
	}

	protected string ClassName(int decade)
	{
		var strClass = "decade";

		if (State.SelectedDecade.HasValue && decade == State.SelectedDecade.Value)
			strClass += " active";

		if (disabled[decade])
			strClass += " disabled";

		if (decade < start)
			strClass += " old";
		else if (decade > end)
			strClass += " new";

		return strClass;
	}

	void DecadeSelected(int decade)
	{
		if (disabled[decade] == false)
		{
			State.SetDisplayYear(decade);
			State.PreviousViewMode();
		}
	}
}