<div class="decades">
	@for (int decade = start - 10; decade <= end + 10; decade += 10)
	{
		var d = decade; // need to capture current value of 'year' variable for onclick method
		<div class="@ClassName(decade)" onclick=@(() => YearSelected(d))>
			@decade
		</div>
	}
</div>

@functions {
	[Parameter] protected DatePickerState State { get; set; }

	int start, end;

	protected override void OnInit()
	{
		State.OnDecadeToDisplayChanged += Render;

		Render();
	}

	void Render()
	{
		(start, end) = State.MonthToDisplay.GetCentury();
	}

	protected string ClassName(int decade)
	{
		var strClass = "decade";

		// TODO: this has just been copied from DatePicker_Years
		if (State.SelectedYear.HasValue && decade == State.SelectedYear.Value)
			strClass += " active";

		if (decade < start)
			strClass += " old";
		else if (decade > end)
			strClass += " new";

		return strClass;
	}

	void YearSelected(int year)
	{
		State.SetDisplayYear(year);
		State.PreviousViewMode();
	}
}