@using NodaTime
@using NodaTime.Extensions

<div class="@ClassName" style="@MainStyle">
	<div class="timepicker-content">		
		<div class="timepicker-hour-up timepicker-button">&uarr;</div>
		<div class="timepicker-hour timepicker-button">
			@State.SelectedTime.ToString("HH", null)
		</div>
		<div class="timepicker-hour-down timepicker-button">&darr;</div>
		
		<div class="timepicker-divider"><span>:</span></div>
		
		<div class="timepicker-minute-up timepicker-button">&uarr;</div>		
		<div class="timepicker-minute timepicker-button">
			@State.SelectedTime.ToString("mm", null)
		</div>
		<div class="timepicker-minute-down timepicker-button">&darr;</div>
		
		<div class="timepicker-meridiem timepicker-button">
			@(State.IsAM ? "AM" : "PM")
		</div>
	</div>	
</div>

@functions {
	TimePickerState State = new TimePickerState();
	/// <summary>Any CSS classes to be applied to the wrapper element.</summary>
	[Parameter] protected string Class { get; set; }
	/// <summary>Any CSS styles to be applied to the wrapper element.</summary>
	[Parameter] protected string Style { get; set; }
	/// <summary>The maximum width of the wrapper element. Must be a valid CSS width value.</summary>
	[Parameter] protected string MaxWidth { get; set; }
	/// <summary>The width of the wrapper element. Must be a valid CSS width value.</summary>
	[Parameter] protected string Width { get; set; } = "250px;";
	/// <summary>Whether the DatePicker should display Inline or not.</summary>
	[Parameter]
	protected bool Inline
	{
		get => State.Inline;
		set => State.Inline = value;
	}
	/// <summary>Whether the DatePicker should be visible or hidden.</summary>
	[Parameter]
	protected bool Visible
	{
		get => State.Visible;
		set => State.Visible = value;
	}

	string ClassName
	{
		get
		{
			if (!string.IsNullOrEmpty(Class))
				return $"{CssClassGenerator.TimePickerMain(Inline)} {Class}";
			else
				return CssClassGenerator.TimePickerMain(Inline);
		}
	}

	protected string MainStyle
	{
		get
		{
			var str = new List<string>();

			if (Inline == false && Visible == false)
				str.Add("display:none;");
			if (!string.IsNullOrEmpty(Width))
				str.Add($"width:{Width};");
			if (!string.IsNullOrEmpty(MaxWidth))
				str.Add($"max-width:{MaxWidth};");

			str.Add(Style);

			return string.Join(" ", str);
		}
	}
}